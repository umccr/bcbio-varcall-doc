import os
import glob

configfile: 'snake_config.yaml'

NORMALS = glob.glob('/home/vlad/validation/normals/*.vcf.gz')

def str_to_lua_variable_name(fpath):
    name = os.path.basename(fpath)
    name = re.sub('[^0-9a-zA-Z_]', '_', name) # Remove invalid characters
    name = re.sub('^[^a-zA-Z_]+', '_', name)  # Remove leading characters until we find a letter or underscore
    return name

VCFANNO_ANNO = '''[[annotation]]
file="/home/vlad/validation/normals/{fname}"
fields=[""]
ops=["self"]
names=["{name}"]

'''
VCFANNO_POSTANNO = '''[[postannotation]]
name="PoN_CNT"
fields=[{fields}]
op="lua:count_true({vars})"
type="Integer"

[[postannotation]]
fields=[{fields}]
op="delete"
'''

rule all:
    input:
        expand('{sample}/{sample}-ann-n1.re.eval', sample=config['samples'])

rule prep_vcfanno:
    input:
        NORMALS
    output:
        'normals/annotate_normals_vcfanno.toml'
    run:
        fpaths=input
        with open(output[0], 'w') as out:
            for fp in fpaths:
                out.write(VCFANNO_ANNO.format(
                    fname=fp, 
                    name=str_to_lua_variable_name(fp)))

            out.write(VCFANNO_POSTANNO.format(
                fields=', '.join('"' + str_to_lua_variable_name(fp) + '"' for fp in fpaths), 
                vars=', '.join(str_to_lua_variable_name(fp) for fp in fpaths)))

rule annotate:
    input:
        lambda wildcards: config["samples"][wildcards.sample],
        toml=rules.prep_vcfanno.output
    output:
        '{sample}/{sample}-ann.vcf.gz'
    shell:
        'vcfanno -lua code.lua {input.toml} {input} | bgzip -c > {output}'

rule filter:
    input:
        rules.annotate.output
    output:
        '{sample}/{sample}-ann-n1.vcf.gz'
    shell:
        'bcftools filter -i "INFO/PoN_CNT>1" {input} -Oz -o {output}'

rule tabix:
    input:
        rules.filter.output
    output:
        '{sample}/{sample}-ann-n1.vcf.gz.tbi'
    shell:
        'tabix -p vcf {input}'

rule eval:
    input:
        rules.filter.output,
        index=rules.tabix.output
    output:
        '{sample}/{sample}-ann-n1.re.eval'
    shell:
        '/home/vlad/validation/rtgeval.kit/run-eval -s /home/vlad/bcbio/genomes/Hsapiens/GRCh37/rtg/GRCh37.sdf '
        '-b /home/vlad/bcbio/genomes/Hsapiens/GRCh37/validation/giab-NA12878-NA24385-somatic/truth_regions.bed '
        '/home/vlad/bcbio/genomes/Hsapiens/GRCh37/validation/giab-NA12878-NA24385-somatic/truth_small_variants.vcf.gz '
        '{input}'

rule report:
    input:
        rules.eval.output
    output:
        'report.tsv'
    run:
        vals = []
        vals.append(['', 'SNP', '', '', 'INDEL', '', ''])
        vals.append(['', 'TP', 'FP', 'FN', 'TP', 'FP', 'FN'])
        for fp in input:
            with open(fp) as f:
                for l in fp:
                    snp_tp, snp_fp, snp_fn, indel_tp, indel_fp, indel_fn = None, None, None, None, None, None
                    allelic, snp, tp, val = l.strip().split()
                    if allelic == 'allelic':
                        if snp == 'SNP' and tp == 'TP': snp_tp = int(val)
                        if snp == 'SNP' and tp == 'FP': snp_fp = int(val)
                        if snp == 'SNP' and tp == 'FN': snp_fn = int(val)
                        if snp == 'INDEL' and tp == 'TP': indel_tp = int(val)
                        if snp == 'INDEL' and tp == 'FP': indel_fp = int(val)
                        if snp == 'INDEL' and tp == 'FN': indel_fn = int(val)
                    vals.append([wildcards.sample, snp_tp, snp_fp, snp_fn, indel_tp, indel_fp, indel_fn])
        with open(output[0], 'w') as out:
            out.write('\t'.join(vals) + '\n')


